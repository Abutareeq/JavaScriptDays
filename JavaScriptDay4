// // Comparison of two JSON objects
// const obj1 = {
//     a : 1,
//     b : 2
// }
// const obj2 = {
//     b : 2,
//     a : 1
// }
// // if keys and values of objects are same (no matter if they were not in order) the json can be compared
// // if the values and keys are not same then it will show false 
// console.log(obj1 === obj2);
// // output is false because elements are not in order so both the objects are not equal
// console.log(obj1.a === obj2.a && obj1.b === obj2.b);
// // output is True because we are compare in the respect of values and keys not on order

// // SCOPE & HOISTING

/*
Scope determines the accessibility (visibility) of variables. there is no concept of scope without block.
JavaScript variables have 3 types of scope:
Block scope
Function scope
Global scope

Block is a instruction which is given to any variable for set a limit of use of variable.
Variables declared inside a { } block cannot be accessed from outside the block.

VAR is form of declaration of variable in JS.var is used as a globle varaible means if v use var a and 
asigned a value of a then it will be use in the all code as it is without any block.Variables declared 
with the var keyword can NOT have block scope. Variables declared inside a { } block can be accessed 
from outside the block.
BUT in a special blocks just like function we cannot use var outside of block if it is declared in block.
function make the variable private. only function can use that variable.

LET --> Variables declared with let have Block Scope. Variables declared with let must be Declared 
before use. Variables declared with let cannot be Redeclared in the same scope.

HOISTING--> hoisting is JavaScript's default behavior of moving declarations to the top. JavaScript 
Declarations are Hoisted. In JavaScript, a variable can be declared after it has been used.
In other words; a variable can be used before it has been declared. Ex of hoinsting-->
*/
// var x       // some random value assign to x
// x = 3       // now we change the random value with 3
// console.log(x)      // output--> 3

// let x       // some random value assign to x
// x = 3       // now we change the random value with 3
// console.log(x)      // output--> 3

// but with const we cant do this because we cant assign random value so we have to assign a value
// const x = 3      
// console.log(x)      // output--> 3

// {
//     let x = 3;
//     {
//         console.log(x);
//     }
// }               // output --> 3

// {
//     const x = 3;
//     {
//         console.log(x);
//     }
// }               // output --> 3

// {
//     const x = 2;
//     function f(){
//         console.log(x);
//     }
//     f()         // we have to call function
// }               // output --> 2
// // it is working with function because fuction lie within block

// FUNCTION --> A special block of code 
// fuction abc(){
//     console.log("function is called");
// }
// abc()       // its neccesary to call a fuction to make working it

// Parameters are pass in function under braket
// function abc(arr,str,flag){
//         console.log(arr,str,flag);
//     }
//     abc([1,2,3],"sample",true)      //Output-->[ 1, 2, 3 ] sample true

// function abv(arr,str,flag){
//     console.log(arr)
//     console.log(str)
//     console.log(flag)
// }

// var arr = [1,2,3];
// var str = "sample";
// var flag = true;
// abv(arr,str,flag)            // Output -->  [ 1, 2, 3 ] sample true
// /* yaad rahe function ke ander jo parameter he wo sirf function ke personal he. wo bahar use nahi honge.
// isliye jo var arr, var str alag he function ke arr, str se. lekin kyuki hmne function ko var ki value 
// assign krne ke bad call kiya he isliye yeh di hui falue fetch karega. */

// function abu(r,t){
//     return r+t;
// }
// abu(1,2)
// console.log(abu(1,2));          // Output --> 3

// // Alternative Way -->
// function abu(r,t){
//      return r+t;
// }
// var a = abu(1,2);
// console.log(a);                    // Output --> 3

// function abu(r,t){
//         console.log("hello");
//          return r+t;
//     }
//     /* remember console only work if we use console before return in a function. if v r using return in function
// then after that we couldn't use console. agar return value kr rhe he or console bhi use kr rhe he to console return
// ke pehle aayega */
//  var a = abu(1,2);
//  console.log(a);        // Output --> hello 3

// // function xyz(a,b){
// //     if(a>b){
// //         return a;
// //     }
// //     console.log("a");
// // }
// // var b = xyz(4,5);
// // console.log(b);
// //  Output --> a , undefined
// /* the output is a of console.log("a") because a is not greater then b so the value never return. and after 
// the execution of if statement v reach at the output undefined because the function never return 
// so  console.log(b) is undefined. agar fuction return hota to function call hota or fir b exicute hota */
// /* but if we do reciprocal of this then --> */
// function xyz(a,b){
//     if(a>b){
//         return a;
//     }
//     console.log("a");
//     return "sample return"
// }
// var b = xyz(4,5);
// console.log(b);         // Output --> a, sample return
// /* in this scenario we got output a for the if statement return and output sample return for function
// xyz by console.log(b) */
